
options 
{
  BUILD_PARSER=true;
  IGNORE_CASE=false;
}

PARSER_BEGIN(HtScrape)
public class HtScrape {

  
  
  }
PARSER_END(HtScrape)

TOKEN_MGR_DECLS : {
  	static int stringSize;
  	static String comment = "";
  	static String stringLit = "";
    public static void main(String[] args)
    {
      	try
      	{
      	  
      	java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader("input.txt"));
      	StringBuilder sb = new StringBuilder();
		String line = "";
		while((line = br.readLine()) != null)
			sb.append(line+"\r\n");
     	
        java.io.StringReader sr = new java.io.StringReader(sb.toString());
        SimpleCharStream scs = new SimpleCharStream(sr);
        HtScrapeTokenManager mgr = new HtScrapeTokenManager(scs);
        while (mgr.getNextToken().kind != EOF) {}
        }
     	catch (Exception e)
     	{
			debugStream.println(e);
     	}
    }
}

SPECIAL_TOKEN :
{ 
  	<SINGLE_LINE_COMMENT:"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  	//{ debugStream.print("COMMENT token: " + matchedToken.image); }
 	| 
  	<STRING_LITERAL:"\"" (~["\n","\r","\""])* ("\""|"\n"|"\r"|"\r\n")>
  	{ debugStream.println("STRING token: " + matchedToken.image); }
}

/*SKIP :
{
  "/*" : WithinMultiLineComment
}*/

<WithinMultiLineComment> SKIP :
{
  "*/"
  /*{System.out.println("MULTI-LINE COMMENT = " + comment);comment = "";}*/
   : DEFAULT
}

<WithinMultiLineComment> MORE :
{
  <~[]> {comment += curChar;}
}

SKIP : {
    <IGNORE : [" ","\r","\n","\t"]>
}

TOKEN:
{
    <CHARACTER:
    "'"(["a"-"z", "A"-"Z", "_"]|"\\"|["0"-"9"])"'"
    >  { debugStream.println("CHARACTER token: " + matchedToken.image); }
    |
    <DIGIT:
    ["0"-"9"]
    >
  	| //reserved words
    <IF: "if" >
    { debugStream.println("IF token: " + matchedToken.image); }
    |
    <ELSE: "else" >
    { debugStream.println("ELSE token: " + matchedToken.image); }
    |
    < THEN: "then" >
    { debugStream.println("THEN token: " + matchedToken.image); }
    | 
    <EXIT: "exit" >
    { debugStream.println("EXIT token: " + matchedToken.image); }
    |
    < THROW: "throw" >
    { debugStream.println("THROW token: " + matchedToken.image); }
    | 
    < BREAK: "break" >
    { debugStream.println("BREAK token: " + matchedToken.image); }
    |
    < VOID: "void" >
    { debugStream.println("VOID token: " + matchedToken.image); }
    |
    < RETURN: "return" >
    { debugStream.println("RETURN token: " + matchedToken.image); }
    |
    < INT: "int" >
    { debugStream.println("INT token: " + matchedToken.image); }
    |
    < NUMBER: "number" >
    { debugStream.println("NUMBER token: " + matchedToken.image); }
  	|
  	< STRING: "string">
  	{ debugStream.println("STRING token: " + matchedToken.image); }
 	| 
    < TRUE: "true" >
    { debugStream.println("TRUE token: " + matchedToken.image); }
    |
    < FALSE: "false" >
    { debugStream.println("FALSE token: " + matchedToken.image); }
    | 
    < TRY: "try" >
    { debugStream.println("TRY token: " + matchedToken.image); }
    |
    < CATCH: "catch" >
    { debugStream.println("CATCH token: " + matchedToken.image); }
    |
    < FOR: "for" >
    { debugStream.println("FOR token: " + matchedToken.image); }
    |
    < NULL: "null" >
    { debugStream.println("NULL token: " + matchedToken.image); }
    |
    < TABLE: "table" >
    { debugStream.println("TABLE token: " + matchedToken.image); }
    |
    < TABLE_DATA: "table_data" >
    { debugStream.println("TABLE_DATA token: " + matchedToken.image); }
    |
    < COLOR: "color" >
    { debugStream.println("COLOR token: " + matchedToken.image); }
  	| 
    < GET: "get" >
    { debugStream.println("GET token: " + matchedToken.image); }
    |
    < PRINT: "print" >
    { debugStream.println("PRINT token: " + matchedToken.image); }
    |
    < CLOSE: "close" >
	{ debugStream.println("CLOSE token: " + matchedToken.image); }
 	|  
    <IDENTIFIER: (["a"-"z", "A"-"Z"])(["a"-"z", "A"-"Z", "0"-"9","_", "-"])* >  
   	{ debugStream.println("IDENTIFIER token: " + matchedToken.image); }
    |
	// SPECIAL SYMBOLS
    < LEFT_PAREN: "(" >
    { debugStream.println("LEFT_PAREN token: " + matchedToken.image); }
  	|
  	< RIGHT_PAREN: ")" >
  	{ debugStream.println("RIGHT_PAREN token: " + matchedToken.image); }
 	|
 	< LEFT_CURLY: "{" >
	{ debugStream.println("LEFT_CURLY token: " + matchedToken.image); }
	| 
 	< RIGHT_CURLY: "}" >
	{ debugStream.println("RIGHT_CURLY token: " + matchedToken.image); }
	| 
 	< EQUALS: "=" >
 	{ debugStream.println("EQUALS token: " + matchedToken.image); }
	|
	< LESS_THAN: "<" >
	{ debugStream.println("LESS_THAN token: " + matchedToken.image); }
	|
	< GREATER_THAN: " >" >
	{ debugStream.println("GREATER_THAN token: " + matchedToken.image); }
	|
	< BANG: "!" >
	{ debugStream.println("BANG token: " + matchedToken.image); }
	|
	< COMMA: "," >
	{ debugStream.println("COMMA token: " + matchedToken.image); }
	|
	< PERIOD: "." >
	{ debugStream.println("PERIOD token: " + matchedToken.image); }
	|
	< SEMICOLON: ";" >
	{ debugStream.println("SEMICOLON token: " + matchedToken.image); }
	|
	< AT_SIGN: "@" >
	{ debugStream.println("AT_SIGN token: " + matchedToken.image); }
	|
	< POUND_SIGN: "#" >
	{ debugStream.println("POUND_SIGN token: " + matchedToken.image); }
    
}
